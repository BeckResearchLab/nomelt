stages:
# get data ready for training eg. filtering out all but best pairs, balancing, etc.
  prepare_data:
    wdir: ./
    cmd: python scripts/prepare_data.py
    deps:
      - ./scripts/prepare_data.py
      - ./nomelt/deduplication.py
      - ./data/database.ddb
    params:
      - data.min_temp_diff
      - data.min_thermo_temp
      - data.min_align_cov
      - data.mmseq_params
      - data.test_size
      - data.dev_sample_data
    outs:
      - ./data/dataset/
    metrics:
      - ./data/data_metrics.yaml:
          cache: false
# train model
  train:
    wdir: ./
    cmd: accelerate launch --config_file ./.config/accelerate/default_config.yaml scripts/train.py 
    deps:
      - ./scripts/train.py
      - ./data/dataset/
      - ./.config/accelerate/default_config.yaml
    params:
      - model.pretrained_model
      - model.task
      - model.generation_max_length
      - model.model_hyperparams
      - training.reweight
      - training.dev_sample_data
      - training.per_device_batch_size
      - training.gradient_accumulation
      - training.auto_find_batch_size
      - training.evals_per_save
      - training.evals_per_epoch
      - training.epochs
      - training.gradient_checkpointing
      - training.learning_rate
      - training.lr_scheduler_type
      - training.label_smoothing_factor
      - training.warmup_ratio
      - training.optim
      - training.optim_args
      - training.max_eval_examples
      - training.fp16
      - training.bf16
      - training.early_stopping
      - training.early_stopping_patience
      - training.early_stopping_threshold
      - training.additional_filters
    outs:
      - ./data/nomelt-model/model/:
          persist: true
      - ./data/nomelt-model/live/report.md:
          cache: false
    metrics:
      - ./data/nomelt-model/live/metrics.json:
          cache: false
      - ./data/nomelt-model/live/plots/:
          cache: false
          persist: true
    plots:
      - ./data/nomelt-model/live/static/:
          cache: false
# run the model on test set and save generated sequences
  make_predictions:
    wdir: ./
    cmd:  accelerate launch --config_file ./.config/accelerate/data_parallel_config.yaml scripts/make_predictions.py 
    deps:
      - ./scripts/make_predictions.py
      - ./data/nomelt-model/model/
      - ./data/dataset/
    params:
      - model.generation_max_length
      - model.generation_num_beams
    outs:
      - ./data/nomelt-model/predictions.tsv
# compute metrics on the test set from the predictions
  score_predictions:
    wdir: ./
    cmd: python scripts/score_predictions.py
    deps:
      - ./scripts/score_predictions.py
      - ./data/nomelt-model/predictions.tsv
    outs:
      - ./data/nomelt-model/test_scores.json
# call the model to generate thermostable variant of enh1
  translate_enh1:
    wdir: ./
    cmd: python scripts/translate_enh1.py
    deps:
      - ./scripts/translate_enh1.py
      - ./data/nomelt-model/model/
    params:
      - model.generation_max_length
      - model.generation_num_beams
    outs:
      - ./data/enh/translate_enh1.json:
          cache: false
# call thermostability estimator on the generated sequence
  estimate_trans_energy_enh1:
    wdir: ./
    cmd: python scripts/estimate_trans_energy_enh1.py
    deps: 
      - scripts/estimate_trans_energy_enh1.py
      - ./data/enh/translate_enh1.json
      - ./.config/af_singularity_config.yaml
    params:
      - optimize.estimator
      - optimize.estimator_args
    outs:
      - ./data/enh/translated_energy_enh1.json:
          cache: false
      - ./data/enh/initial_estimate/
# use thermo estimator to find a subset of mutations that are likely to increase thermostability
  optimize_enh1:
    wdir: ./
    cmd: python scripts/optimize_enh1.py
    deps:
      - ./scripts/optimize_enh1.py
      - ./data/enh/translate_enh1.json
    params:
      - optimize.estimator
      - optimize.estimator_args
      - optimize.n_trials
      - optimize.direction
      - optimize.sampler
      - optimize.cut_tails
      - optimize.gap_compressed_mutations
      - optimize.matrix
      - optimize.match_score
      - optimize.mismatch_score
      - optimize.gapopen
      - optimize.gapextend
      - optimize.penalize_end_gaps
      - optimize.sampler_args
      - optimize.optuna_overwrite
    outs:
      - ./data/enh/optimize_enh1/:
          persist: true
      - ./data/enh/optimize_enh1_trials.csv:
          cache: false
      - ./data/enh/optimize_enh1_results.json:
          cache: false
# estimate the DNA binding of the enh1 variant proposed by the model as well as the optimization process
  # trans_binding:
  #   wdir: ./
  #   cmd: python scripts/dna_binding_alignment.py
  #   deps:
  #     - ./scripts/dna_binding_alignment.py
  #     - ./data/enh/optimize_enh1_results.json
  #     - ./data/enh/initial_estimate/
  #     - ./data/enh/optimize_enh1/
  #   outs:
  #     - ./data/enh/enh1_vs_consensus_dna_binding.json:
  #         cache: false
  #     - ./data/enh/trans_binding/
  compute_test_embeddings:
    wdir: ./
    cmd: python scripts/compute_test_embeddings.py
    deps: 
      - ./scripts/compute_test_embeddings.py
      - ./data/dataset/
      - ./data/nomelt-model/model/
  # compare generated to thermophilic structures
  compare_sequence_alignment:
    wdir: ./
    cmd: python scripts/compare_sequence_alignment.py
    deps:
      - ./scripts/compare_sequence_alignment.py
      - ./data/nomelt-model/predictions.tsv
    outs:
      - ./data/nomelt-model/sequence_alignment.csv:
          cache: false
  compare_structure:
    wdir: ./
    cmd: python scripts/compare_structure.py
    deps:
      - ./scripts/compare_structure.py
      - ./data/nomelt-model/predictions.tsv
    outs:
      - ./data/nomelt-model/structure_metrics.json:
          cache: false
# call the af2dg thermostability estimator on a sample of data and save the scores
  data_estimator_distribution:
    wdir: ./
    cmd: python scripts/data_estimator_distribution.py
    deps:
      - ./data/nomelt-model/predictions.tsv
      - ./scripts/data_estimator_distribution.py
    outs:
     - ./data/thermo_gen_estimated.json:
         cache: false
# proof of principle scripts
#################################

# natural log loss
  natural_diversity_entropy:
    wdir: ./
    cmd: python scripts/proof_of_principle/natural_diversity_entropy.py
    deps:
      - ./data/dataset
      - ./scripts/proof_of_principle/natural_diversity_entropy.py
    outs:
      - ./data/proof_of_principle/natural_diversity_entropy.json:
          cache: false
# call the af2dg thermostability estimator the wild type enh and the consensus sequence from literature
  enh1_vs_consensus_in_silico_estimator:
    wdir: ./
    cmd: python scripts/proof_of_principle/enh1_vs_consensus_in_silico_estimator.py
    deps:
      - ./scripts/proof_of_principle/enh1_vs_consensus_in_silico_estimator.py
    outs:
      - ./data/proof_of_principle/enh1_vs_consensus_in_silico_estimator_out.json:
          cache: false
# manually add a few mutations to the wild type enh and call the af2dg thermostability estimator to see how it effects the score
  enh1_vary_mutations:
    wdir: ./
    cmd: python scripts/proof_of_principle/enh1_vary_mutations.py
    deps:
      - ./scripts/proof_of_principle/enh1_vary_mutations.py
    outs:
      - ./data/proof_of_principle/vary_mutations.json:
          cache: false
# run the optimization process on the wild type enh vs literature consensus sequence
  enh1_consensus_optimize:
    wdir: ./
    cmd: python scripts/proof_of_principle/enh1_consensus_optimize.py
    deps:
      - ./scripts/proof_of_principle/enh1_consensus_optimize.py
    outs:
      - ./data/proof_of_principle/optimize_enh1_cons_results.json:
          cache: false
      - ./data/proof_of_principle/optimize_enh1_cons_trials.csv:
          cache: false
# run the optimization process on the wild type enh vs random sequence
  enh1_random_opt: 
    wdir: ./
    cmd: python scripts/proof_of_principle/enh1_random_opt.py
    deps:
      - ./scripts/proof_of_principle/enh1_random_opt.py
    outs:
      - ./data/proof_of_principle/optimize_enh1_random_results.json:
          cache: false
      - ./data/proof_of_principle/optimize_enh1_rand_trials.csv:
          cache: false
# get the docking scores from haddock of the wild type enh vs consensus sequence
  enh1_vs_consensus_docking_score:
    wdir: ./
    cmd: python scripts/proof_of_principle/enh1_vs_consensus_docking_score.py
    deps:
      - ./scripts/proof_of_principle/enh1_vs_consensus_docking_score.py
    outs:
      - ./data/proof_of_principle/enh1_vs_consensus_dna_binding.json:
          cache: false
  enh1_in_training_set:
    wdir: ./
    cmd: python scripts/proof_of_principle/enh1_check_training_set.py
    deps:
      - ./scripts/proof_of_principle/enh1_check_training_set.py
    outs:
      -  ./data/enh/training_data_homologs.json:
          cache: false

